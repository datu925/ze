class AlchemyCaller
  attr_accessor :response
  def initialize(sample)
    @sample = sample
    @response = nil
  end



  def call_API
    # if @sample.content is small enough
      # (standard send)
      response = HTTParty.post("http://access.alchemyapi.com/calls/text/TextGetRankedKeywords",
      :query => { :apikey => ENV["SECRET_ALCHEMY"],
                 :text => @sample.content,
                 :outputMode => 'json',
                 :sentiment => 1
               },
      :headers => { 'Content-Type' => 'application/x-www-form-urlencoded' } )
      p "*" * 100
      p "RESPONSE"
      p response
      p "*" * 100
      p "RESPONSE.BODY"
      p response.body
      p "*" * 100
      p "PARSED RESPONSE.BODY"
      @response = JSON.parse(response.body)
      p @response
    # else
      # (iterative send)
      # create mallable copy of @sample.content
      # take off portion of copy
      # send portion
      # receive portion and its keywords
      # update the keywords in @sample with response.body
      # if copy > 0, repeat
      # @response
      # @response = JSON.parse(response.body)
    # end

  end

  {"status"=>"OK",
    "usage"=>"By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
    "totalTransactions"=>"2",
    "language"=>"english",
    "keywords"=>[
      {"relevance"=>"0.93688",
        "sentiment"=>{
          "type"=>"neutral "},
          "text"=>"Tuesday present opportunities"},
          {"relevance"=>"0.755924", "sentiment"=>
            {"score"=>"-0.54974", "type"=>"negative"},
              "text"=>"Mr. Trump"},
              {"relevance"=>"0.563102", "sentiment"=>{
                  "score"=>"-0.54974", "type"=>"negative"},
                  "text"=>"primaries"},
                  {"relevance"=>"0.50813", "sentiment"=>
                    {"type"=>"neutral"}, "text"=>"pitfalls"}, {"relevance"=>"0.506978", "sentiment"=>{"score"=>"-0.525385", "type"=>"negative"}, "text"=>"Republicans"}, {"relevance"=>"0.479577", "sentiment"=>{"score"=>"-0.54974", "type"=>"negative"}, "text"=>"nomination"}, {"relevance"=>"0.447713", "sentiment"=>{"score"=>"-0.54974", "type"=>"negative"}, "text"=>"chance"}, {"relevance"=>"0.3501", "sentiment"=>{"type"=>"neutral"}, "text"=>"contests"}]}


  def convert_to_keyword_objects
    if @response && @response['keywords']
      keywords = @response['keywords']
      keywords.each do |keyword|
        @sample.keywords << Keyword.new({
                                          text: keyword["text"],
                                          sentiment_type: keyword["sentiment"]["type"],
                                          sentiment_score: keyword["sentiment"]["score"],
                                          gender: GenderDetector.detect(keyword["text"]),
                                        })
      end
    end
  end
end
